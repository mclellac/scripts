#!/bin/bash
# A simple shell script to remove .bak, .swp, .DS_Store, and *~ files.

# Set default values
DEFAULT_DIR="${HOME}"
TEMP_DIR="${HOME}/.$(basename "${0}").log"
REGEX='.*(~|bak|swp|DS_Store)$'

# Define color codes
RED="$(tput setaf 1)"
GREEN="$(tput setaf 2)"
WHITE="$(tput setaf 7)"
YELLOW="$(tput setaf 11)"
ORANGE="$(tput setaf 172)"
RESET="$(tput sgr0)"

# Print an error message and exit with status code 1
error_quit() {
    message_warn "$1"
    exit 1
}

# Print a success message
message_success() {
    message_info "$1"
}

# Print an informational message
message_info() {
    message="${*:-"${WHITE}Error: No message passed"}"
    printf '%s%s%s\n' "${GREEN}" "${message}" "${WHITE}"
}

# Print a warning message
message_warn() {
    message="${*:-"${WHITE}Error: No message passed"}"
    printf '%s%s%s\n' "${RED}" "${message}" "${WHITE}"
}

# Check if the argument is a directory
arg_check() {
    if [ ! -d "$1" ]; then
        message_warn "$1 is not a directory. Defaulting to ${HOME}"
        sanity_check
    else
        DEFAULT_DIR="$1"
        sanity_check
    fi
}

# Draw a box around a message
msg_box() {
    local term_width=80
    local message_lines=("$@")
    local max_line_length=0

    # Find the maximum line length
    for line in "${message_lines[@]}"; do
        ((max_line_length < ${#line})) && { max_line_length="${#line}"; }
    done

    if [ "$max_line_length" -gt "$term_width" ]; then
        error_quit "error: msg_box() >> message length exceeds term width. Split message into multiple lines or decrease the number of characters.\n"
    fi

    local padding=$(( (term_width - max_line_length) / 2 ))

    # Draw the box
    printf '%s┌' "${ORANGE}" && printf '%.0s─' {0..79} && printf '┐\n' && printf '│%79s │\n' ""

    for line in "${message_lines[@]}"; do
        local line_length=${#line}
        local left_padding=$(( padding - (line_length / 2) ))
        local right_padding=$(( term_width - left_padding - line_length ))

        printf "│%${left_padding}.${left_padding}s" && printf '%s%*s%s' "${YELLOW}" "-$line_length" "$line" "${ORANGE}" && printf "%${right_padding}.${right_padding}s│\n" ""
    done

    printf '│%79s │\n' "" && printf '└' && printf '%.0s─' {0..79} && printf '┘\n%s' "${RESET}"
}

# Check the operating system and set the find command accordingly
sanity_check() {
    if [[ "$OSTYPE" == 'linux-gnu' ]]; then
        agnostic_find="find ${DEFAULT_DIR} -regextype posix-extended -regex"
    elif [[ "$OSTYPE" == 'freebsd'* ]] || [[ "$OSTYPE" == 'darwin'* ]]; then
        agnostic_find="find -E ${DEFAULT_DIR} -type f -regex"
    fi

    if [ -f "${TEMP_DIR}" ]; then
        rm "${TEMP_DIR}"
        msg_box "removing ${TEMP_DIR}"
    fi
}

# Find files that match the regex and write to temporary file
find_files() {
    (${agnostic_find} "${REGEX}") >"${TEMP_DIR}"
}

# Count the number of files to be removed
count_files() {
    fnum=$(wc -l <"${TEMP_DIR}")
}

# Display message box with number of files to be removed
display_message() {
    if [ "$fnum" -eq 1 ]; then
        msg_box "${fnum} file to be removed."
    else
        msg_box "${fnum} files to be removed."
    fi
}

# Remove the files
remove_files() {
    while read -r line; do
        message_warn "${line}"
        rm "${line}"
    done <"${TEMP_DIR}"
}

# Clean up the temporary files
cleanup() {
    rm "${TEMP_DIR}"
}

# Check if arguments were passed, otherwise use default directory
if [ "$#" -ne 0 ]; then
    arg_check "$@"
else
    sanity_check
fi

find_files
count_files
display_message
remove_files
cleanup
message_success "Cleanup complete."
